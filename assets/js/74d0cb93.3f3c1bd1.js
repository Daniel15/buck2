"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9719],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>s,MDXProvider:()=>m,mdx:()=>g,useMDXComponents:()=>o,withMDXComponents:()=>p});var n=r(67294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a.apply(this,arguments)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,n,l=function(e,t){if(null==e)return{};var r,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var s=n.createContext({}),p=function(e){return function(t){var r=o(t.components);return n.createElement(e,a({},t,{components:r}))}},o=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},m=function(e){var t=o(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",x={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,l=e.mdxType,a=e.originalType,i=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),p=o(r),m=l,c=p["".concat(i,".").concat(m)]||p[m]||x[m]||a;return r?n.createElement(c,u(u({ref:t},s),{},{components:r})):n.createElement(c,u({ref:t},s))}));function g(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=r.length,i=new Array(a);i[0]=f;var u={};for(var d in t)hasOwnProperty.call(t,d)&&(u[d]=t[d]);u.originalType=e,u[c]="string"==typeof e?e:l,i[1]=u;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},29482:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>o,frontMatter:()=>a,metadata:()=>u,toc:()=>s});var n=r(87462),l=(r(67294),r(3905));const a={},i="uqueryctx",u={unversionedId:"generated/bxl/uqueryctx",id:"generated/bxl/uqueryctx",title:"uqueryctx",description:"The context for performing uquery operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within uquery command.",source:"@site/../docs/generated/bxl/uqueryctx.md",sourceDirName:"generated/bxl",slug:"/generated/bxl/uqueryctx",permalink:"/docs/generated/bxl/uqueryctx",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"manualSidebar",previous:{title:"unconfigured_target_node",permalink:"/docs/generated/bxl/unconfigured_target_node"},next:{title:"Architectural Model",permalink:"/docs/developers/architecture/buck2"}},d={},s=[{value:"attrregexfilter",id:"attrregexfilter",level:2},{value:"Details",id:"details",level:3},{value:"buildfile",id:"buildfile",level:2},{value:"Details",id:"details-1",level:3},{value:"deps",id:"deps",level:2},{value:"Details",id:"details-2",level:3},{value:"eval",id:"eval",level:2},{value:"Details",id:"details-3",level:3},{value:"filter",id:"filter",level:2},{value:"Details",id:"details-4",level:3},{value:"inputs",id:"inputs",level:2},{value:"Details",id:"details-5",level:3},{value:"kind",id:"kind",level:2},{value:"Details",id:"details-6",level:3},{value:"owner",id:"owner",level:2},{value:"Details",id:"details-7",level:3},{value:"rdeps",id:"rdeps",level:2},{value:"Details",id:"details-8",level:3},{value:"testsof",id:"testsof",level:2},{value:"Details",id:"details-9",level:3}],p={toc:s};function o(e){let{components:t,...r}=e;return(0,l.mdx)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"uqueryctx"},"uqueryctx"),(0,l.mdx)("p",null,"The context for performing ",(0,l.mdx)("inlineCode",{parentName:"p"},"uquery")," operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within uquery command."),(0,l.mdx)("h2",{id:"attrregexfilter"},"attrregexfilter"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def attrregexfilter(attribute: str.type, value: str.type, targets: "") -> "target_set"\n')),(0,l.mdx)("p",null,"The attrregexfilter query for rule attribute filtering with regex."),(0,l.mdx)("h3",{id:"details"},"Details"),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_attrregexfilter(ctx):\n    filtered = ctx.uquery().attrregexfilter("foo", "he.lo", "bin/kind/...")\n    ctx.output.print(filtered)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"buildfile"},"buildfile"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def buildfile(targets: "") -> "file_set"\n')),(0,l.mdx)("p",null,"Find the build file(s) that defines a target or a target set."),(0,l.mdx)("h3",{id:"details-1"},"Details"),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _buildfile_impl(ctx):\n    owner = ctx.uquery().owner(["bin/TARGET", "bin/kind"])\n    result = ctx.uquery().buildfile(owner)\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"deps"},"deps"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def deps(universe: "", depth: [None, int.type] = None, filter: [None, str.type] = None) -> "target_set"\n')),(0,l.mdx)("p",null,"The deps query for finding the transitive closure of dependencies."),(0,l.mdx)("h3",{id:"details-2"},"Details"),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_deps(ctx):\n    result = ctx.uquery().deps("root//bin:the_binary", 1)\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"eval"},"eval"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def eval(query: str.type, query_args: [None, ""] = None) -> ""\n')),(0,l.mdx)("p",null,"Evaluates some general query string, ",(0,l.mdx)("inlineCode",{parentName:"p"},"query_args")," can be a target_set of unconfigured nodes, or a list of strings."),(0,l.mdx)("h3",{id:"details-3"},"Details"),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_eval(ctx):\n    result = ctx.uquery().eval("inputs(cell//path/to/file:target)")\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"filter"},"filter"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def filter(regex: str.type, targets: "") -> "target_set"\n')),(0,l.mdx)("p",null,"The filter query for filtering targets by name."),(0,l.mdx)("h3",{id:"details-4"},"Details"),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_filter(ctx):\n    result = ctx.uquery().filter(".*the_binary", "root//...")\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"inputs"},"inputs"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def inputs(targets: "") -> "file_set"\n')),(0,l.mdx)("p",null,"The inputs query for finding input files."),(0,l.mdx)("h3",{id:"details-5"},"Details"),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_inputs(ctx):\n    result = ctx.uquery().inputs("root//bin:the_binary")\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"kind"},"kind"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def kind(regex: str.type, targets: "") -> "target_set"\n')),(0,l.mdx)("p",null,"The kind query for filtering targets by rule type."),(0,l.mdx)("h3",{id:"details-6"},"Details"),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_kind(ctx):\n    kind = ctx.uquery().kind(".*1", "bin/kind/...")\n    ctx.output.print(kind)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"owner"},"owner"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def owner(files: [str.type, "file_set"]) -> "target_set"\n')),(0,l.mdx)("p",null,"The owner query for finding targets that own specified files."),(0,l.mdx)("h3",{id:"details-7"},"Details"),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _owner_impl(ctx):\n    owner = ctx.uquery().owner("bin/TARGETS.fixture")\n    ctx.output.print(owner)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"rdeps"},"rdeps"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def rdeps(universe: "", from: "", depth: [None, int.type] = None) -> "target_set"\n')),(0,l.mdx)("p",null,"The rdeps query for finding the transitive closure of reverse dependencies."),(0,l.mdx)("h3",{id:"details-8"},"Details"),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_rdeps(ctx):\n    result = ctx.uquery().rdeps("root//bin:the_binary", "//lib:file1", 100)\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"testsof"},"testsof"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def testsof(targets: "") -> "target_set"\n')),(0,l.mdx)("p",null,"The testsof query for lising the tests of the specified targets."),(0,l.mdx)("h3",{id:"details-9"},"Details"),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _testsof_impl(ctx):\n    result = ctx.uquery().testsof("//:foo_lib")\n    ctx.output.print(result)\n')))}o.isMDXComponent=!0}}]);