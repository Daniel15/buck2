"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>s,MDXProvider:()=>d,mdx:()=>b,useMDXComponents:()=>c,withMDXComponents:()=>p});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},i.apply(this,arguments)}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){return function(t){var r=c(t.components);return n.createElement(e,i({},t,{components:r}))}},c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},h="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),p=c(r),d=a,h=p["".concat(o,".").concat(d)]||p[d]||f[d]||i;return r?n.createElement(h,l(l({ref:t},s),{},{components:r})):n.createElement(h,l({ref:t},s))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[h]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},16203:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const i={},o="ensured_artifact",l={unversionedId:"generated/bxl/ensured_artifact",id:"generated/bxl/ensured_artifact",title:"ensured_artifact",description:"An artifact that will be materialized to buck-out at the end of the bxl invocation. These artifacts can be printed to bxl's results. Doing so will print the path of the artifact rather than the standard representation.",source:"@site/../docs/generated/bxl/ensured_artifact.md",sourceDirName:"generated/bxl",slug:"/generated/bxl/ensured_artifact",permalink:"/docs/generated/bxl/ensured_artifact",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"manualSidebar",previous:{title:"cqueryctx",permalink:"/docs/generated/bxl/cqueryctx"},next:{title:"ensured_artifact_group",permalink:"/docs/generated/bxl/ensured_artifact_group"}},u={},s=[{value:"abs_path",id:"abs_path",level:2},{value:"Details",id:"details",level:4},{value:"rel_path",id:"rel_path",level:2},{value:"Details",id:"details-1",level:4}],p={toc:s};function c(e){let{components:t,...r}=e;return(0,a.mdx)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"ensured_artifact"},"ensured_artifact"),(0,a.mdx)("p",null,"An artifact that will be materialized to buck-out at the end of the bxl invocation. These artifacts can be printed to bxl's results. Doing so will print the path of the artifact rather than the standard representation."),(0,a.mdx)("p",null,"Ensured artifacts are serializable and hashable."),(0,a.mdx)("h2",{id:"abs_path"},"abs_path"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def abs_path() -> ""\n')),(0,a.mdx)("p",null,"Converts this artifact to be printed by its absolute path. Note that this will only print out the absolute path via ",(0,a.mdx)("inlineCode",{parentName:"p"},"ctx.output.print()"),". Starlark's ",(0,a.mdx)("inlineCode",{parentName:"p"},"print()")," will print out the display info for an ensured artifact."),(0,a.mdx)("h4",{id:"details"},"Details"),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_abs_path(ctx):\n    actions = ctx.bxl_actions.action_factory()\n    output = actions.write("my_output", "my_content")\n    ensured = ctx.output.ensure(output) # currently defaults to creating an EnsuredArtifact with a relative path\n\n    ensured_with_abs_path = ensured.abs_path() # create a new EnsuredArtifact with absolute path to reuse\n    print(ensured_with_abs_path) # should return something like <ensured artifact ... >\n    ctx.output.print(ensured_with_abs_path) # should return the absolute path of the artifact\n')),(0,a.mdx)("hr",null),(0,a.mdx)("h2",{id:"rel_path"},"rel_path"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-python"},'def rel_path() -> ""\n')),(0,a.mdx)("p",null,"Converts this artifact to be printed by its path relative to the project root. Note that this will only print out the relative path via ",(0,a.mdx)("inlineCode",{parentName:"p"},"ctx.output.print()"),". Starlark's ",(0,a.mdx)("inlineCode",{parentName:"p"},"print()")," will print out the display info for an ensured artifact."),(0,a.mdx)("h4",{id:"details-1"},"Details"),(0,a.mdx)("p",null,"Sample usage:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_rel_path(ctx):\n    actions = ctx.bxl_actions.action_factory()\n    output = actions.write("my_output", "my_content")\n    ensured = ctx.output.ensure(output) # currently defaults to creating an EnsuredArtifact with a relative path\n\n    ensured_with_rel_path = ensured.rel_path() # create a new EnsuredArtifact with relative path to reuse\n    print(ensured_with_rel_path) # should return something like <ensured artifact ... >\n    ctx.output.print(ensured_with_rel_path) # should return the relative path of the artifact\n')))}c.isMDXComponent=!0}}]);