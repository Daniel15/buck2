"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9170],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>u,MDXProvider:()=>m,mdx:()=>b,useMDXComponents:()=>c,withMDXComponents:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l.apply(this,arguments)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),d=function(e){return function(t){var n=c(t.components);return r.createElement(e,l({},t,{components:n}))}},c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},s="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},x=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,a=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,s=d["".concat(a,".").concat(m)]||d[m]||h[m]||l;return n?r.createElement(s,i(i({ref:t},u),{},{components:n})):r.createElement(s,i({ref:t},u))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=x;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[s]="string"==typeof e?e:o,a[1]=i;for(var u=2;u<l;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}x.displayName="MDXCreateElement"},39395:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>s,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=n(87462),o=(n(67294),n(3905));const l={id:"getting_started",title:"Getting Started"},a="Getting started",i={unversionedId:"getting_started",id:"getting_started",title:"Getting Started",description:"Installing Buck2",source:"@site/../docs/getting_started.md",sourceDirName:".",slug:"/getting_started",permalink:"/docs/getting_started",draft:!1,tags:[],version:"current",frontMatter:{id:"getting_started",title:"Getting Started"},sidebar:"manualSidebar",previous:{title:"Why Buck2",permalink:"/docs/why"},next:{title:"Benefits When Compared to Buck1",permalink:"/docs/benefits"}},p={},u=[{value:"Installing Buck2",id:"installing-buck2",level:2},{value:"Compiling your first project",id:"compiling-your-first-project",level:2},{value:"Creating your first hello_world project",id:"creating-your-first-hello_world-project",level:2},{value:"Learning More",id:"learning-more",level:2},{value:"Communication channels",id:"communication-channels",level:2}],d=(c="FbInternalOnly",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)});var c;const m={toc:u};function s(e){let{components:t,...n}=e;return(0,o.mdx)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"getting-started"},"Getting started"),(0,o.mdx)("h2",{id:"installing-buck2"},"Installing Buck2"),(0,o.mdx)("p",null,"To get started, first install the ",(0,o.mdx)("inlineCode",{parentName:"p"},"buck2")," executable:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"rustup install nightly\ncargo +nightly install --git https://github.com/facebook/buck2.git cli\n")),(0,o.mdx)("p",null,"That will install ",(0,o.mdx)("inlineCode",{parentName:"p"},"buck2")," into a suitable directory, e.g. ",(0,o.mdx)("inlineCode",{parentName:"p"},"$HOME/.cargo/bin"),", which you should then add to your ",(0,o.mdx)("inlineCode",{parentName:"p"},"$PATH"),"."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"export PATH=$HOME/.cargo/bin:$PATH\n")),(0,o.mdx)("h2",{id:"compiling-your-first-project"},"Compiling your first project"),(0,o.mdx)("p",null,"Once it is installed, you can now build projects with ",(0,o.mdx)("inlineCode",{parentName:"p"},"buck2"),"!"),(0,o.mdx)("p",null,"In this section, we will go over building the ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/facebook/buck2/tree/main/examples/hello_world"},"hello_world example project"),", which builds a simple C++ binary. If you are interested in seeing how other languages can be built, check the ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/facebook/buck2/tree/main/examples/prelude"},"prelude example project")," which contains Rust, C++, Python, and OCaml targets."),(0,o.mdx)("p",null,"First, clone the buck2 repository and cd into the hello_world project:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"$ git clone https://github.com/facebook/buck2.git\n$ cd examples/hello_world\n")),(0,o.mdx)("p",null," ",(0,o.mdx)("inlineCode",{parentName:"p"},"buck2 init")," is all the setup you need to start building. This will pull in ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/facebook/buck2-prelude"},"buck2-prelude")," in to your project:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"$ buck2 init\n")),(0,o.mdx)("p",null,"To build the entire project, run:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"$ buck2 build //...\n")),(0,o.mdx)("p",null,"To list all targets available in the project, run:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"$ buck2 targets //...\n")),(0,o.mdx)("p",null,"To run the main C++ binary, run:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"$ buck2 run //:main\n")),(0,o.mdx)("p",null,"The newly built binary can be found with the ",(0,o.mdx)("inlineCode",{parentName:"p"},"--show-output")," flag:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"$ buck2 build //:main --show-output\n")),(0,o.mdx)("p",null,"Output:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"Build ID: 0e890477-5b7f-4829-9ffe-662e572320a0\nJobs completed: 3. Time elapsed: 0.0s.\nBUILD SUCCEEDED\nroot//:main buck-out/v2/gen/root/9f4d83578bb24895/__main__/main\n")),(0,o.mdx)("h2",{id:"creating-your-first-hello_world-project"},"Creating your first hello_world project"),(0,o.mdx)("p",null,"In this section, we\u2019ll demonstrate how to create a simple C++ Hello World project."),(0,o.mdx)("p",null,"To get started, make a new folder for your project and cd into it."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"$ mkdir hello_world\n$ cd hello_world\n")),(0,o.mdx)("p",null,"Next, run ",(0,o.mdx)("inlineCode",{parentName:"p"},"buck2 init")," to initialize the project. This command will set up your project with ",(0,o.mdx)("inlineCode",{parentName:"p"},"git")," and pull in ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/facebook/buck2-prelude"},"buck2-prelude")," as a submodule. Additionally, it will generate multiple files with default values."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"$ buck2 init\n")),(0,o.mdx)("p",null,"Now let\u2019s add our source code ",(0,o.mdx)("inlineCode",{parentName:"p"},"main.cpp")," ,"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},'#include <iostream>\nint main() {\n    std::cout << "Hello from a C++ Buck2 program!" << std::endl;\n}\n')),(0,o.mdx)("p",null,"Then, define a ",(0,o.mdx)("inlineCode",{parentName:"p"},"cxx_binary")," in our root ",(0,o.mdx)("inlineCode",{parentName:"p"},"BUCK")," file:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},'# BUCK\ncxx_binary(\n    name = "main",\n    srcs = ["main.cpp"],\n    link_style = "static",\n)\n')),(0,o.mdx)("p",null,"If you try to build ",(0,o.mdx)("inlineCode",{parentName:"p"},"//:main")," at this point, you will see an error about ",(0,o.mdx)("inlineCode",{parentName:"p"},"buck2")," not being able to find ",(0,o.mdx)("inlineCode",{parentName:"p"},"toolchains//:cxx"),"."),(0,o.mdx)("p",null,"As a final step, let\u2019s define the necessary toolchain targets. For this project, we will need  ",(0,o.mdx)("inlineCode",{parentName:"p"},"system_cxx_toolchain")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"system_python_bootstrap_toolchain"),". These will pick up necessary tools (clang++, python, etc.) from the system."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},'# toolchains/BUCK\nload("@prelude//toolchains:cxx.bzl", "system_cxx_toolchain")\nload("@prelude//toolchains:python.bzl", "system_python_bootstrap_toolchain")\n\nsystem_cxx_toolchain(\n    name = "cxx",\n    visibility = ["PUBLIC"],\n)\n\nsystem_python_bootstrap_toolchain(\n    name = "python_bootstrap",\n    visibility = ["PUBLIC"],\n)\n')),(0,o.mdx)("p",null,"At this point, your project should have the following files:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},'$ tree -a -I "buck-out|prelude|.git"\n|-- .buckconfig\n|-- .gitmodules\n|-- BUCK\n|-- main.cpp\n`-- toolchains\n    `-- BUCK\n')),(0,o.mdx)("p",null,"Now we\u2019re ready to see the build in action."),(0,o.mdx)("p",null,"To build the main C++ target, run:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"$ buck2 build //:main\n")),(0,o.mdx)("p",null,"To run the main C++ target, run:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"$ buck2 run //:main\n")),(0,o.mdx)("h2",{id:"learning-more"},"Learning More"),(0,o.mdx)("p",null,"You should now be ready to explore Buck2 for use in your own projects. You can explore the ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/facebook/buck2/tree/main/examples"},"examples")," folder and look out for more tutorials in the future."),(0,o.mdx)(d,{mdxType:"FbInternalOnly"},(0,o.mdx)("h2",{id:"communication-channels"},"Communication channels"),(0,o.mdx)("p",null,"The following channels provide an insight into Buck2:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"https://fb.workplace.com/groups/buck2prototyping"},"Buck2 Engineering")," - Workplace group for discussions about what features Buck2 should have, how it's going, status updates, and much more."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"https://fb.workplace.com/groups/buck2users"},"Buck2 Users")," - Workplace group featuring questions from users and reports of bugs."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"https://fb.workplace.com/groups/347532827186692"},"Buck2 Rule Authors")," - Workplace group for discussions about language-specific rules."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("a",{parentName:"li",href:"https://www.internalfb.com/intern/monitor/oncall_profile?oncall=buck2"},"Buck2 Oncall Hub")," - urgent tasks and escalation."))))}s.isMDXComponent=!0}}]);