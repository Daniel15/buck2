"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9170],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>p,MDXProvider:()=>m,mdx:()=>b,useMDXComponents:()=>s,withMDXComponents:()=>c});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},o.apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),c=function(e){return function(n){var t=s(n.components);return a.createElement(e,o({},n,{components:t}))}},s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=s(t),m=r,d=c["".concat(l,".").concat(m)]||c[m]||h[m]||o;return t?a.createElement(d,i(i({ref:n},p),{},{components:t})):a.createElement(d,i({ref:n},p))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=g;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},39395:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const o={id:"getting_started",title:"Getting Started"},l=void 0,i={unversionedId:"getting_started",id:"getting_started",title:"Getting Started",description:"Installing Buck2",source:"@site/../docs/getting_started.md",sourceDirName:".",slug:"/getting_started",permalink:"/docs/getting_started",draft:!1,tags:[],version:"current",frontMatter:{id:"getting_started",title:"Getting Started"},sidebar:"manualSidebar",previous:{title:"Why Buck2",permalink:"/docs/why"},next:{title:"Benefits When Compared to Buck1",permalink:"/docs/benefits"}},u={},p=[{value:"Installing Buck2",id:"installing-buck2",level:2},{value:"Compiling your first project",id:"compiling-your-first-project",level:2},{value:"Creating your first hello_world project",id:"creating-your-first-hello_world-project",level:2},{value:"Learning More",id:"learning-more",level:2},{value:"Communication channels",id:"communication-channels",level:2}],c=(s="FbInternalOnly",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",e)});var s;const m={toc:p};function d(e){let{components:n,...t}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h2",{id:"installing-buck2"},"Installing Buck2"),(0,r.mdx)("p",null,"To get started, first install the ",(0,r.mdx)("inlineCode",{parentName:"p"},"buck2")," executable:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"rustup install nightly\ncargo +nightly install --git https://github.com/facebook/buck2.git cli\n")),(0,r.mdx)("p",null,"The above commands install ",(0,r.mdx)("inlineCode",{parentName:"p"},"buck2")," into a suitable directory, such as ",(0,r.mdx)("inlineCode",{parentName:"p"},"$HOME/.cargo/bin"),", which you should then add to your ",(0,r.mdx)("inlineCode",{parentName:"p"},"$PATH"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sh"},"export PATH=$HOME/.cargo/bin:$PATH\n")),(0,r.mdx)("p",null,"With Buck2 installed, you can build projects with ",(0,r.mdx)("inlineCode",{parentName:"p"},"buck2"),"!"),(0,r.mdx)("h2",{id:"compiling-your-first-project"},"Compiling your first project"),(0,r.mdx)("p",null,"This section covers the building of a ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebookincubator/buck2/tree/main/examples/hello_world"},"'hello_world' example project")," that contains a simple C++ binary. If you are interested in seeing how other languages can be built, take a look at the ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebookincubator/buck2/tree/main/examples/prelude"},"prelude example project"),", which contains Rust, C++, Python, and OCaml targets."),(0,r.mdx)("p",null,"First, clone the buck2 repository and cd into the 'hello_world' project:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/facebookincubator/buck2.git\ncd examples/hello_world\n")),(0,r.mdx)("p",null," ",(0,r.mdx)("inlineCode",{parentName:"p"},"buck2 init")," is all the setup you need to start building. This will pull ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebookincubator/buck2-prelude"},"buck2-prelude")," into your project:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sh"},"buck2 init\n")),(0,r.mdx)("p",null,"To build the entire project, run:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sh"},"buck2 build //...\n")),(0,r.mdx)("p",null,"To list all targets available in the project, run:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sh"},"buck2 targets //...\n")),(0,r.mdx)("p",null,"To run the main C++ binary, run:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sh"},"buck2 run //:main\n")),(0,r.mdx)("p",null,"The newly built binary can be found with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"--show-output")," flag:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sh"},"buck2 build //:main --show-output\n")),(0,r.mdx)("p",null,"Output:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sh"},"Build ID: 0e890477-5b7f-4829-9ffe-662e572320a0\nJobs completed: 3. Time elapsed: 0.0s.\nBUILD SUCCEEDED\nroot//:main buck-out/v2/gen/root/9f4d83578bb24895/__main__/main\n")),(0,r.mdx)("h2",{id:"creating-your-first-hello_world-project"},"Creating your first hello_world project"),(0,r.mdx)("p",null,"This section demonstrates how to create a simple C++ 'hello_world' project."),(0,r.mdx)("p",null,"To get started, make a new folder for your project and cd into it."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sh"},"mkdir hello_world\ncd hello_world\n")),(0,r.mdx)("p",null,"Next, run ",(0,r.mdx)("inlineCode",{parentName:"p"},"buck2 init")," to initialize the project. This command will set up your project with ",(0,r.mdx)("inlineCode",{parentName:"p"},"git")," and pull in ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/buck2-prelude"},"buck2-prelude")," as a submodule. Additionally, it will generate multiple files with default values."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sh"},"buck2 init\n")),(0,r.mdx)("p",null,"Next, add the source code ",(0,r.mdx)("inlineCode",{parentName:"p"},"main.cpp")," ,"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-c++"},'#include <iostream>\nint main() {\n    std::cout << "Hello from a C++ Buck2 program!" << std::endl;\n}\n')),(0,r.mdx)("p",null,"Then, define a ",(0,r.mdx)("inlineCode",{parentName:"p"},"cxx_binary")," in the root ",(0,r.mdx)("inlineCode",{parentName:"p"},"BUCK")," file:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-Python"},'# BUCK\ncxx_binary(\n    name = "main",\n    srcs = ["main.cpp"],\n    link_style = "static",\n)\n')),(0,r.mdx)("p",null,"If you try to build ",(0,r.mdx)("inlineCode",{parentName:"p"},"//:main")," at this point, you'll see an error about ",(0,r.mdx)("inlineCode",{parentName:"p"},"buck2")," not being able to find ",(0,r.mdx)("inlineCode",{parentName:"p"},"toolchains//:cxx"),"."),(0,r.mdx)("p",null,"The final step is to define the necessary toolchain targets. For that project, you need ",(0,r.mdx)("inlineCode",{parentName:"p"},"system_cxx_toolchain")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"system_python_bootstrap_toolchain"),", which will pick up the necessary tools (clang++, python, and so on) from the system."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-Python"},'# toolchains/BUCK\nload("@prelude//toolchains:cxx.bzl", "system_cxx_toolchain")\nload("@prelude//toolchains:python.bzl", "system_python_bootstrap_toolchain")\n\nsystem_cxx_toolchain(\n    name = "cxx",\n    visibility = ["PUBLIC"],\n)\n\nsystem_python_bootstrap_toolchain(\n    name = "python_bootstrap",\n    visibility = ["PUBLIC"],\n)\n')),(0,r.mdx)("p",null,"At this point, your project should have the following files:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},'$ tree -a -I "buck-out|prelude|.git"\n|-- .buckconfig\n|-- .gitmodules\n|-- BUCK\n|-- main.cpp\n`-- toolchains\n    `-- BUCK\n')),(0,r.mdx)("p",null,"Now, you're ready to see the build in action."),(0,r.mdx)("p",null,"To build the main C++ target, run:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sh"},"buck2 build //:main\n")),(0,r.mdx)("p",null,"To run the main C++ target, run:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sh"},"buck2 run //:main\n")),(0,r.mdx)("h2",{id:"learning-more"},"Learning More"),(0,r.mdx)("p",null,"You should now be ready to explore Buck2 for use in your own projects. You can explore the ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebookincubator/buck2/tree/main/examples"},"examples")," folder.  Look out for more tutorials in the future."),(0,r.mdx)(c,{mdxType:"FbInternalOnly"},(0,r.mdx)("h2",{id:"communication-channels"},"Communication channels"),(0,r.mdx)("p",null,"The following channels provide an insight into Buck2:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://fb.workplace.com/groups/buck2prototyping"},"Buck2 Engineering")," - Workplace group for discussions about what features Buck2 should have, how it's going, status updates, and much more."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://fb.workplace.com/groups/buck2users"},"Buck2 Users")," - Workplace group featuring questions from users and reports of bugs."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://fb.workplace.com/groups/347532827186692"},"Buck2 Rule Authors")," - Workplace group for discussions about language-specific rules."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://www.internalfb.com/intern/monitor/oncall_profile?oncall=buck2"},"Buck2 Oncall Hub")," - urgent tasks and escalation."))))}d.isMDXComponent=!0}}]);