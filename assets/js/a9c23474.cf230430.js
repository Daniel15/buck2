"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1175],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>c,MDXProvider:()=>u,mdx:()=>y,useMDXComponents:()=>d,withMDXComponents:()=>p});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a.apply(this,arguments)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),p=function(e){return function(t){var r=d(t.components);return n.createElement(e,a({},t,{components:r}))}},d=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(r),u=o,m=p["".concat(i,".").concat(u)]||p[u]||f[u]||a;return r?n.createElement(m,l(l({ref:t},c),{},{components:r})):n.createElement(m,l({ref:t},c))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},87229:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const a={},i="ExternalRunnerTestInfo",l={unversionedId:"generated/native/providers/ExternalRunnerTestInfo",id:"generated/native/providers/ExternalRunnerTestInfo",title:"ExternalRunnerTestInfo",description:"Provider that signals that a rule can be tested using an external runner. This is the Buck1-compatible API for tests.",source:"@site/../docs/generated/native/providers/ExternalRunnerTestInfo.md",sourceDirName:"generated/native/providers",slug:"/generated/native/providers/ExternalRunnerTestInfo",permalink:"/docs/generated/native/providers/ExternalRunnerTestInfo",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"manualSidebar",previous:{title:"ExecutionPlatformRegistrationInfo",permalink:"/docs/generated/native/providers/ExecutionPlatformRegistrationInfo"},next:{title:"InstallInfo",permalink:"/docs/generated/native/providers/InstallInfo"}},s={},c=[{value:"command : <code>[[str.type, &quot;&quot;]]</code>",id:"command--strtype-",level:2},{value:"contacts : <code>[str.type]</code>",id:"contacts--strtype",level:2},{value:"default_executor : <code>&quot;command_executor_config&quot;</code>",id:"default_executor--command_executor_config",level:2},{value:"env : <code>{str.type: &quot;&quot;}</code>",id:"env--strtype-",level:2},{value:"executor_overrides : <code>{str.type: &quot;command_executor_config&quot;}</code>",id:"executor_overrides--strtype-command_executor_config",level:2},{value:"labels : <code>[str.type]</code>",id:"labels--strtype",level:2},{value:"run_from_project_root : <code>[bool.type]</code>",id:"run_from_project_root--booltype",level:2},{value:"test_type : <code>str.type</code>",id:"test_type--strtype",level:2},{value:"use_project_relative_paths : <code>[bool.type]</code>",id:"use_project_relative_paths--booltype",level:2}],p={toc:c};function d(e){let{components:t,...r}=e;return(0,o.mdx)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"externalrunnertestinfo"},"ExternalRunnerTestInfo"),(0,o.mdx)("p",null,"Provider that signals that a rule can be tested using an external runner. This is the Buck1-compatible API for tests."),(0,o.mdx)("h2",{id:"command--strtype-"},"command : ",(0,o.mdx)("inlineCode",{parentName:"h2"},'[[str.type, ""]]')),(0,o.mdx)("p",null,"A Starlark value representing the command for this test. The external test runner is what gives meaning to this command. This is of type [",'[str.type, "_arglike"]',"]"),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"contacts--strtype"},"contacts : ",(0,o.mdx)("inlineCode",{parentName:"h2"},"[str.type]")),(0,o.mdx)("p",null,"A starlark value representing the contacts for this test. This is largely expected to be an oncall, though it's not validated in any way. This is of type ","[str.type]"),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"default_executor--command_executor_config"},"default_executor : ",(0,o.mdx)("inlineCode",{parentName:"h2"},'"command_executor_config"')),(0,o.mdx)("p",null,"Defaul executor to use to run tests.  This is of type CommandExecutorConfig. If none is passed we will default to the execution platform."),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"env--strtype-"},"env : ",(0,o.mdx)("inlineCode",{parentName:"h2"},'{str.type: ""}')),(0,o.mdx)("p",null,"A Starlark value representing the environment for this test. Here again, the external test runner is what will this meaning. This is of type {str.type: _arglike}"),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"executor_overrides--strtype-command_executor_config"},"executor_overrides : ",(0,o.mdx)("inlineCode",{parentName:"h2"},'{str.type: "command_executor_config"}')),(0,o.mdx)("p",null,"Executors that Tpx can use to override the default executor. This is of type {str.type: CommandExecutorConfig}"),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"labels--strtype"},"labels : ",(0,o.mdx)("inlineCode",{parentName:"h2"},"[str.type]")),(0,o.mdx)("p",null,"A starlark value representing the labels for this test. This is of type ","[str.type]"),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"run_from_project_root--booltype"},"run_from_project_root : ",(0,o.mdx)("inlineCode",{parentName:"h2"},"[bool.type]")),(0,o.mdx)("p",null,"Whether this test should run from the project root, as opposed to the cell root. The default is not to. This is of type ","[bool.type]"),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"test_type--strtype"},"test_type : ",(0,o.mdx)("inlineCode",{parentName:"h2"},"str.type")),(0,o.mdx)("p",null,"A Starlark value representing the type of this test. This is of type str.type"),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"use_project_relative_paths--booltype"},"use_project_relative_paths : ",(0,o.mdx)("inlineCode",{parentName:"h2"},"[bool.type]")),(0,o.mdx)("p",null,"Whether this test should use relative paths. The default is not to. This is of type ","[bool.type]"))}d.isMDXComponent=!0}}]);