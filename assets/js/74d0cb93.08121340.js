"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9719],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>s,MDXProvider:()=>p,mdx:()=>g,useMDXComponents:()=>m,withMDXComponents:()=>o});var r=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),o=function(e){return function(t){var n=m(t.components);return r.createElement(e,a({},t,{components:n}))}},m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",x={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),o=m(n),p=l,c=o["".concat(u,".").concat(p)]||o[p]||x[p]||a;return n?r.createElement(c,d(d({ref:t},s),{},{components:n})):r.createElement(c,d({ref:t},s))}));function g(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,u=new Array(a);u[0]=f;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d[c]="string"==typeof e?e:l,u[1]=d;for(var s=2;s<a;s++)u[s]=n[s];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},29482:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>u,default:()=>m,frontMatter:()=>a,metadata:()=>d,toc:()=>s});var r=n(87462),l=(n(67294),n(3905));const a={},u="uqueryctx",d={unversionedId:"generated/bxl/uqueryctx",id:"generated/bxl/uqueryctx",title:"uqueryctx",description:"The context for performing uquery operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within uquery command.",source:"@site/../docs/generated/bxl/uqueryctx.md",sourceDirName:"generated/bxl",slug:"/generated/bxl/uqueryctx",permalink:"/docs/generated/bxl/uqueryctx",draft:!1,tags:[],version:"current",frontMatter:{}},i={},s=[{value:"Members",id:"members",level:3},{value:"buildfile",id:"buildfile",level:2},{value:"Details",id:"details",level:3},{value:"eval",id:"eval",level:2},{value:"Details",id:"details-1",level:3},{value:"filter",id:"filter",level:2},{value:"Details",id:"details-2",level:3},{value:"owner",id:"owner",level:2},{value:"Details",id:"details-3",level:3},{value:"testsof",id:"testsof",level:2},{value:"Details",id:"details-4",level:3}],o={toc:s};function m(e){let{components:t,...n}=e;return(0,l.mdx)("wrapper",(0,r.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"uqueryctx"},"uqueryctx"),(0,l.mdx)("p",null,"The context for performing ",(0,l.mdx)("inlineCode",{parentName:"p"},"uquery")," operations in bxl. The functions offered on this ctx are the same behaviour as the query functions available within uquery command."),(0,l.mdx)("h3",{id:"members"},"Members"),(0,l.mdx)("table",{class:"starlark_table starlark_members_table"},(0,l.mdx)("thead",null,(0,l.mdx)("tr",null,(0,l.mdx)("th",null,"Member"),(0,l.mdx)("th",null,"Description"),(0,l.mdx)("th",null,"Type"))),(0,l.mdx)("tbody",null,(0,l.mdx)("tr",null,(0,l.mdx)("td",null,(0,l.mdx)("p",null,"buildfile")),(0,l.mdx)("td",null,(0,l.mdx)("p",null,"Find the build file(s) that defines a target or a target set.")),(0,l.mdx)("td",null,(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    targets: ""\n) -> "file_set"\n')))),(0,l.mdx)("tr",null,(0,l.mdx)("td",null,(0,l.mdx)("p",null,"eval")),(0,l.mdx)("td",null,(0,l.mdx)("p",null,"Evaluates some general query string")),(0,l.mdx)("td",null,(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    query: str.type,\n  query_args: [str.type] = None\n) -> ""\n')))),(0,l.mdx)("tr",null,(0,l.mdx)("td",null,(0,l.mdx)("p",null,"filter")),(0,l.mdx)("td",null,(0,l.mdx)("p",null,"The filter query for filtering targets by name.")),(0,l.mdx)("td",null,(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    regex: str.type,\n  targets: ""\n) -> "target_set"\n')))),(0,l.mdx)("tr",null,(0,l.mdx)("td",null,(0,l.mdx)("p",null,"owner")),(0,l.mdx)("td",null,(0,l.mdx)("p",null,"The owner query for finding targets that own specified files.")),(0,l.mdx)("td",null,(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    files: [str.type, "file_set"]\n) -> "target_set"\n')))),(0,l.mdx)("tr",null,(0,l.mdx)("td",null,(0,l.mdx)("p",null,"testsof")),(0,l.mdx)("td",null,(0,l.mdx)("p",null,"The testsof query for lising the tests of the specified targets.")),(0,l.mdx)("td",null,(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'(\n    targets: ""\n) -> "target_set"\n')))))),(0,l.mdx)("h2",{id:"buildfile"},"buildfile"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def buildfile(targets: "") -> "file_set"\n')),(0,l.mdx)("p",null,"Find the build file(s) that defines a target or a target set."),(0,l.mdx)("h3",{id:"details"},"Details"),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _buildfile_impl(ctx):\n    owner = ctx.uquery().owner(["bin/TARGET", "bin/kind"])\n    result = ctx.uquery().buildfile(owner)\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"eval"},"eval"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def eval(query: str.type, query_args: [str.type] = None) -> ""\n')),(0,l.mdx)("p",null,"Evaluates some general query string"),(0,l.mdx)("h3",{id:"details-1"},"Details"),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_eval(ctx):\n    result = ctx.uquery().eval("inputs(cell//path/to/file:target)")\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"filter"},"filter"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def filter(regex: str.type, targets: "") -> "target_set"\n')),(0,l.mdx)("p",null,"The filter query for filtering targets by name."),(0,l.mdx)("h3",{id:"details-2"},"Details"),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _impl_filter(ctx):\n    result = ctx.uquery().filter(".*the_binary", "root//...")\n    ctx.output.print(result)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"owner"},"owner"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def owner(files: [str.type, "file_set"]) -> "target_set"\n')),(0,l.mdx)("p",null,"The owner query for finding targets that own specified files."),(0,l.mdx)("h3",{id:"details-3"},"Details"),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _owner_impl(ctx):\n    owner = ctx.uquery().owner("bin/TARGETS.fixture")\n    ctx.output.print(owner)\n')),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"testsof"},"testsof"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-python"},'def testsof(targets: "") -> "target_set"\n')),(0,l.mdx)("p",null,"The testsof query for lising the tests of the specified targets."),(0,l.mdx)("h3",{id:"details-4"},"Details"),(0,l.mdx)("p",null,"Sample usage:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},'def _testsof_impl(ctx):\n    result = ctx.uquery().testsof("//:foo_lib")\n    ctx.output.print(result)\n')))}m.isMDXComponent=!0}}]);